# Trigger the workflow on push to the main branch
on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    # Environment variables for AWS and Kubernetes configuration
    env:
      AWS_REGION: us-east-1
      CLUSTER_NAME: my-eks-cluster
      KUBERNETES_NAMESPACE: default

    steps:
    # Checkout the repository code
    - name: Checkout code
      uses: actions/checkout@v3

    # Configure AWS credentials
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # Set up kubectl
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.25.0'

    # Update kubeconfig to point to the EKS cluster
    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}

    # Build and push Docker image to Amazon ECR
    - name: Build and push Docker image
      run: |
        IMAGE_TAG=$(date +%Y%m%d%H%M%S)
        docker build -t ${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG .
        aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY }}
        docker push ${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG

    # Deploy application to EKS
    - name: Deploy to EKS
      run: |
        kubectl set image deployment/my-deployment my-container=${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG
        kubectl rollout status deployment/my-deployment

    # Notify on success or failure
    - name: Send notification
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "Deployment successful!"
        else
          echo "Deployment failed!"
        fi
